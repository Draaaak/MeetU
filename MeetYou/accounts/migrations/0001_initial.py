# Generated by Django 2.2.18 on 2021-02-07 12:09

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='行政区划代码')),
                ('name', models.CharField(max_length=15, unique=True, verbose_name='市区名')),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='行政区划代码')),
                ('name', models.CharField(max_length=15, unique=True, verbose_name='县名')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
            ],
        ),
        migrations.CreateModel(
            name='Village',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='行政区划代码')),
                ('name', models.CharField(max_length=15, unique=True, verbose_name='村名')),
            ],
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, verbose_name='姓名')),
                ('cardNum', models.CharField(max_length=18, unique=True, verbose_name='身份证号')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='个人住址')),
                ('schoolId', models.CharField(max_length=10, verbose_name='学号')),
                ('college', models.CharField(max_length=15, verbose_name='学院')),
                ('major', models.CharField(max_length=15, verbose_name='专业')),
                ('description', models.TextField(blank=True, null=True, verbose_name='个人简介')),
                ('isActive', models.CharField(choices=[('0', '不活跃'), ('1', '活跃')], default='0', max_length=1, verbose_name='是否处于活跃状态')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.City', verbose_name='市')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.County', verbose_name='县')),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.Village', verbose_name='村')),
            ],
            options={
                'verbose_name': '志愿者信息',
                'verbose_name_plural': '志愿者信息',
            },
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, verbose_name='姓名')),
                ('cardNum', models.CharField(max_length=18, unique=True, verbose_name='身份证号')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='个人住址')),
                ('description', models.TextField(blank=True, null=True, verbose_name='个人简介')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.City', verbose_name='市')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.County', verbose_name='县')),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.Village', verbose_name='村')),
            ],
            options={
                'verbose_name': '组织管理员信息',
                'verbose_name_plural': '组织管理员信息',
            },
        ),
        migrations.CreateModel(
            name='Child',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, verbose_name='姓名')),
                ('cardNum', models.CharField(max_length=18, unique=True, verbose_name='身份证号')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='个人住址')),
                ('school', models.CharField(max_length=15, verbose_name='学校')),
                ('description', models.TextField(blank=True, null=True, verbose_name='个人情况介绍')),
                ('isProxy', models.CharField(choices=[('0', '未代理'), ('1', '代理')], default='0', max_length=1, verbose_name='是否由村长代理')),
                ('isActive', models.CharField(choices=[('0', '不活跃'), ('1', '活跃')], default='0', max_length=1, verbose_name='是否处于活跃状态')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.City', verbose_name='市')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.County', verbose_name='县')),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.Village', verbose_name='村')),
            ],
            options={
                'verbose_name': '留守儿童信息',
                'verbose_name_plural': '留守儿童信息',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.ContentType')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin', to='accounts.Organization', verbose_name='隶属组织')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
